L=36
M<- runif(1000)
width <- 2
lags <- 0:L
betas_l <- dnorm(lags,20,width)
betas <- matrix(rep(betas_l,length(M)),nrow=L+1,byrow = F) #lag x obs
matplot(betas)
matplot(betas,type="l")
matplot(betas,type="l",ylab="True Coefficients",xlab="Lags")
betas <- sweep(matrix(rep(((M+1)/2),L+1),nrow=L+1,byrow = T), MARGIN=1, betas_l, `*`)
matplot(betas,type="l",ylab="True Coefficients",xlab="Lags")
centers <- M*20 + 10
if(length(M)==1){
betas <- as.matrix(sapply(lags,dnorm,mean=centers,sd=width))
}else{
betas <- t(sapply(lags,dnorm,mean=centers,sd=width))
}
idx <- betas < 0.02
betas[idx] <- 0
matplot(betas,type="l",ylab="True Coefficients",xlab="Lags")
M<- runif(3)
betas <- matrix(rep(betas_l,length(M)),nrow=L+1,byrow = F) #lag x obs
matplot(betas,type="l",ylab="True Coefficients",xlab="Lags")
betas <- sweep(matrix(rep(((M+1)/2),L+1),nrow=L+1,byrow = T), MARGIN=1, betas_l, `*`)
matplot(betas,type="l",ylab="True Coefficients",xlab="Lags")
centers <- M*20 + 10
if(length(M)==1){
betas <- as.matrix(sapply(lags,dnorm,mean=centers,sd=width))
}else{
betas <- t(sapply(lags,dnorm,mean=centers,sd=width))
}
idx <- betas < 0.02
betas[idx] <- 0
matplot(betas,type="l",ylab="True Coefficients",xlab="Lags")
M
M <- c(0.1,0.5,0.9)
betas <- sweep(matrix(rep(((M+1)/2),L+1),nrow=L+1,byrow = T), MARGIN=1, betas_l, `*`)
matplot(betas,type="l",ylab="True Coefficients",xlab="Lags")
centers <- M*20 + 10
if(length(M)==1){
betas <- as.matrix(sapply(lags,dnorm,mean=centers,sd=width))
}else{
betas <- t(sapply(lags,dnorm,mean=centers,sd=width))
}
idx <- betas < 0.02
betas[idx] <- 0
matplot(betas,type="l",ylab="True Coefficients",xlab="Lags")
knitr::opts_chunk$set(echo = F)
source('./Functions/cover.R')
source('./Functions/plot_DLF.R')
source('./Functions/plot_cumul.R')
source('./Functions/plot_DLF_diff.R')
source('./Functions/plot_DLF_byLag.R')
source('./Functions/plot_cumulVmod.R')
source('./Functions/overall_stats.R')
source('./Functions/plot_surface.R')
source('./Functions/calc_sim_avg_beta.R')
source('./Functions/overall_stats.R')
source('./Functions/summary_stats.R')
source('./Functions/lag_type_plots.R')
source('./Functions/modifier_type_plots.R')
source('./Functions/cumul_summary_table.R')
library(ggplot2)
library(gridExtra)
library(tidyverse)
library(knitr)
library(mdlm)
date_time <- "04_14_22_18_49" #used for tables
load(paste("./Simulations/",ifelse(penalize,"Penalized","Non-Penalized"), "/summary_cumul_",date_time,".rda",sep=""))
penalize=T
load(paste("./Simulations/",ifelse(penalize,"Penalized","Non-Penalized"), "/summary_cumul_",date_time,".rda",sep=""))
kable(summary_cumul)
load(paste("./Simulations/",ifelse(penalize,"Penalized","Non-Penalized"), "/summary_lag_",date_time,".rda",sep=""))
kable(summary_lag)
x <- rnorm(100)
y <- 2*x
coef(lm(y~x))
x <- runif(100)
y <- 2*x
coef(lm(y~x))
plot(x,y)
y <- 2*x + rnorm(100)
coef(lm(y~x))
coef(glm(y~x))
coef(gam(y~x))
library(mgcv)
coef(gam(y~x))
?gam
coef(gam(y~s(x)))
coef(lm(y~x))
coef(glm(y~x))
coef(gam(y~x))
coef(gam(y~s(x)))
knitr::opts_chunk$set(echo = F)
library(devtools)
# remove.packages("mdlm", lib="~/R/win-library/4.1")
# devtools::install_github("ddemateis/mdlm",ref="main",auth_token = "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") #private repository
library(mdlm)
library(ggplot2)
library(knitr)
library(doParallel)
load("./Data/AirPollWeekly.rda")
#exposure data set, rows are individuals, columns are PM2.5 levels
dataset <- AirPollWeekly[,grep("PM25",colnames(AirPollWeekly))]
#################################################
#           Set these first                     #
#################################################
n_sim <- 100 #number of simulations for each type/noise combination
noise_grid <- c(10,1)
type_grid <- c(1,2,3)
lag_grid <- c(0,10,20,30)+1 #lag value for cross-sections
est_mods <- c(0.25,0.5,0.75)
ncov <- 3 #number of covariates to include in simulation
df_l <- 5 #lag degrees of freedom (large for penalized)
df_m <- 5 #modifier degrees of freedom (large for penalized)
penalize <- Fs #whether to penalize (change df accordingly)
penalize <- F #whether to penalize (change df accordingly)
mod_given <- ifelse(is.na(est_mods),F,T)
# seed <- round(runif(1),8)*100000000 #printed on plot titles, can use to reproduce data for that plot
# set.seed(seed)
#simulate data
modifiers <- runif(nrow(dataset))
data <- sim_data(x=dataset,mods=modifiers,noise=noise,type=type,mag=mag,ncovariates = ncov)
type=2
noise=1
data <- sim_data(x=dataset,mods=modifiers,noise=noise,type=type,mag=mag,ncovariates = ncov)
mag=1
data <- sim_data(x=dataset,mods=modifiers,noise=noise,type=type,mag=mag,ncovariates = ncov)
#if not modifiers given for estimation, use existing values
if(sum(mod_given)==0){
all_mods <- data$mods
}else{
all_mods <- c(est_mods,data$mods)
}
covariates = data$Z
penalize
#cross-basis
if(penalize){
cb <- cross_basis(x=data$x,M=data$mods,argmod=list(fun="ps",df=df_m),arglag=list(fun="ps",df=df_l))
}else{
cb <- cross_basis(x=data$x,M=data$mods,argmod=list(fun="ns",df=df_m),arglag=list(fun="ns",df=df_l))
}
model <- gam(data$y~cb$cb)
model2 <- lm(data$y~cb$cb)
sum(coef(model!==coef(model2))
sum(coef(model!=coef(model2))
)
length(coef(model))
length(coef(model2))
coef(model)!=coef(model2)
knitr::opts_chunk$set(echo = F, message = F, warning = F)
library(dlim)
library(dplyr)
library(reshape2)
library(ggplot2)
library(dlnm)
library(mgcv)
library(ggpubr)
library(knitr)
library(corrplot)
source("Functions/fit_DLM.R")
load("bw_es_dat.rda")
load("bw_es_pm_pred.rda")
df_l <- 10 #lag degrees of freedom (large for penalized)
df_m <- 10 #modifier degrees of freedom (large for penalized)
penalize <- T #whether to penalize (change df accordingly)
modifiers <- data.frame(SensePop = dat$Sn_P_S, SensePop_noLBW = my_SnP_noLBW, LifeExp = dat$Lf_xp, Asthma = dat$Ast__, Cancer = dat$Cncr_, Diabetes = dat$Dbts_, HR = dat$Hr___,  LowBW = dat$Lw_b_, MentalHealth = dat$Mnt__, Pop64 = dat$Pp__64, Pop5 = dat$Pp__5,
Dem = dat$Dmg_S, Housing = dat$Hsn__, Disability = dat$Prcn_, HighSchool = dat$Pr_____, Linguistic = dat$Prcnt_ln_, LowIncome = dat$Prcnt_lw_, POC = dat$Prc___)
geom_mean <- function(x) exp(mean(log(x[x!=0])))
my_SnP_noLBW <- apply(dat[ , c("Lf__P", "As___P", "Cn__P", "Db__P", "H____", "M___P", "P__64_", "P__5_")], 1, geom_mean)
df_l <- 10 #lag degrees of freedom (large for penalized)
df_m <- 10 #modifier degrees of freedom (large for penalized)
penalize <- T #whether to penalize (change df accordingly)
modifiers <- data.frame(SensePop = dat$Sn_P_S, SensePop_noLBW = my_SnP_noLBW, LifeExp = dat$Lf_xp, Asthma = dat$Ast__, Cancer = dat$Cncr_, Diabetes = dat$Dbts_, HR = dat$Hr___,  LowBW = dat$Lw_b_, MentalHealth = dat$Mnt__, Pop64 = dat$Pp__64, Pop5 = dat$Pp__5,
Dem = dat$Dmg_S, Housing = dat$Hsn__, Disability = dat$Prcn_, HighSchool = dat$Pr_____, Linguistic = dat$Prcnt_ln_, LowIncome = dat$Prcnt_lw_, POC = dat$Prc___)
percentiles <- data.frame(SensePop = dat$S_P_S_, SensePop_noLBW = my_SnP_noLBW, LifeExp = dat$Lf__P,Asthma = dat$As___P, Cancer = dat$Cn__P, Diabetes = dat$Db__P, HR = dat$H____,  LowBW = dat$Lw___P, MentalHealth = dat$M___P, Pop64 = dat$P__64_, Pop5 = dat$P__5_,
Dem = dat$D_S_P, Housing = dat$H___P, Disability = dat$Pr__P, HighSchool = dat$P______, Linguistic = dat$Prcnt_ln__, LowIncome = dat$Prcnt_lw__, POC = dat$Prc____P)
modifiers_names <- c("Sensitive Population","Sensitive Population w/o LBW", "life expectancy","asthma hospitalization rate", "cancer prevalence", "diabetes prevalence", "heart disease in adults",  "low birth weight", "mental health indicator", "population over 64", "population under 5",
"Demographics", "housing cost burdened", "percent disability", "percent less than high school education", "percent linguistic isolation", "percent low income", "percent people of color")
z <- select(dat, c(MatAge, MotherHeightIn , PriorWeight , MotherBMI ,Income , MEduc , Marital2 , PrenatalCare , SmkAny, race , hispanic , elev_feet , month , YOC , Temp_tri1 , Temp_tri2 , Temp_tri3))
#z$fipscoor <- as.factor(z$fipscoor)
z$month <- as.factor(z$month)
z$YOC <- as.factor(z$YOC)
z$MatAge2 <- z$MatAge^2
i=1
#set modifier
modifier <- as.numeric(component_modifiers[,i])
component_modifiers <- data.frame(SensePop = dat$Sn_P_S, SensePop_noLBW = my_SnP_noLBW, Dem = dat$Dmg_S)
component_modifiers_names <- c("Sensitive Population","Sensitive Population w/o LBW", "Demographics")
#set modifier
modifier <- as.numeric(component_modifiers[,i])
modifier_name <- component_modifiers_names[i]
#fit models
mod_fit <- dlim(y = dat$bwgaz, x = pm_pred, modifier = modifier, z = z, df_m = df_m, df_l = df_l, penalize = penalize, fit_fn = "bam")
source("~/AA CSU/Research/S21_Ander/dlim/R/dlim.R")
summary(mod_fit$model)
detach("package:dlim", unload = TRUE)
library(dlim)
mod_fit_2int <- mod_fit
#fit models
mod_fit <- dlim(y = dat$bwgaz, x = pm_pred, modifier = modifier, z = z, df_m = df_m, df_l = df_l, penalize = penalize, fit_fn = "bam")
summary(mod_fit$model)
summary(mod_fit_2int$model)
STAT670.HW3.data <- read.csv("~/AA CSU/670/STAT670-HW3-data.csv", header=FALSE)
View(STAT670.HW3.data)
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv("~/AA CSU/670/STAT670-HW3-data.csv", header=FALSE)
pi
colnames(dat) <- c("X1","X2")
dim(dat)
q_density <- function(rhoP){
6*(1-rhoP)*rhoP*(2 *pi*sqrt(1-(2*rhoP- 1)^2))^5* exp(sum(x[i,1]^2 - 2*(2*rhoP- 1)*x[i,1]*x[i,2] + x[i,2]^2)/(2(1-(2*rhoP- 1)^2)))
#integrate q over support of rhoP
norm_const <- integrate(q_density, lower=0, upper=1)
}
q_density(0)
q_density <- function(rhoP){
6*(1-rhoP)*rhoP*(2 *pi*sqrt(1-(2*rhoP- 1)^2))^5* exp(sum(x[i,1]^2 - 2*(2*rhoP- 1)*dat[i,1]*dat[i,2] + dat[i,2]^2)/(2(1-(2*rhoP- 1)^2)))
#integrate q over support of rhoP
norm_const <- integrate(q_density, lower=0, upper=1)
}
q_density(0,dat)
q_density <- function(rhoP,dat){
6*(1-rhoP)*rhoP*(2 *pi*sqrt(1-(2*rhoP- 1)^2))^5* exp(sum(x[i,1]^2 - 2*(2*rhoP- 1)*dat[i,1]*dat[i,2] + dat[i,2]^2)/(2(1-(2*rhoP- 1)^2)))
#integrate q over support of rhoP
norm_const <- integrate(q_density, lower=0, upper=1)
}
q_density <- function(rhoP,dat){
6*(1-rhoP)*rhoP*(2 *pi*sqrt(1-(2*rhoP- 1)^2))^5* exp(sum(x[i,1]^2 - 2*(2*rhoP- 1)*dat[i,1]*dat[i,2] + dat[i,2]^2)/(2(1-(2*rhoP- 1)^2)))
#integrate q over support of rhoP
norm_const <- integrate(q_density, lower=0, upper=1)
}
q_density(0,dat)
q_density <- function(rhoP,dat){
6*(1-rhoP)*rhoP*(2 *pi*sqrt(1-(2*rhoP- 1)^2))^5* exp(sum(dat[i,1]^2 - 2*(2*rhoP- 1)*dat[i,1]*dat[i,2] + dat[i,2]^2)/(2(1-(2*rhoP- 1)^2)))
#integrate q over support of rhoP
norm_const <- integrate(q_density, lower=0, upper=1)
}
q_density <- function(rhoP,dat){
6*(1-rhoP)*rhoP*(2 *pi*sqrt(1-(2*rhoP- 1)^2))^5* exp(sum(dat[i,1]^2 - 2*(2*rhoP- 1)*dat[i,1]*dat[i,2] + dat[i,2]^2)/(2(1-(2*rhoP- 1)^2)))
}
q_density(0,dat)
6*(1-rhoP)*rhoP*(2 *pi*sqrt(1-(2*rhoP- 1)^2))^5* exp(sum(dat[i,1]^2 - 2*(2*rhoP- 1)*dat[i,1]*dat[i,2] + dat[i,2]^2)/(2*(1-(2*rhoP- 1)^2)))
6*(1-rhoP)*rhoP*(2 *pi*sqrt(1-(2*rhoP- 1)^2))^5* exp(sum(dat[i,1]^2 - 2*(2*rhoP- 1)*dat[i,1]*dat[i,2] + dat[i,2]^2)/(2*(1-(2*rhoP- 1)^2)))
6*(1-rhoP)*rhoP*(2 *pi*sqrt(1-(2*rhoP- 1)^2))^5* exp(sum(dat[i,1]^2 - 2*(2*rhoP- 1)*dat[i,1]*dat[i,2] + dat[i,2]^2)/(2*(1-(2*rhoP- 1)^2)))
q_density <- function(rhoP,dat){
6*(1-rhoP)*rhoP*(2 *pi*sqrt(1-(2*rhoP- 1)^2))^5* exp(sum(dat[i,1]^2 - 2*(2*rhoP- 1)*dat[i,1]*dat[i,2] + dat[i,2]^2)/(2*(1-(2*rhoP- 1)^2)))
}
q_density(0,dat)
q_density(0.5,dat)
q_density(0.9,dat)
q_density(0.1,dat)
#integrate q over support of rhoP
norm_const <- integrate(q_density, lower=0, upper=1)
#integrate q over support of rhoP
norm_const <- integrate(q_density, lower=0, upper=1, dat=dat)
q_density <- function(rhoP){
6*(1-rhoP)*rhoP*(2 *pi*sqrt(1-(2*rhoP- 1)^2))^5* exp(sum(dat[i,1]^2 - 2*(2*rhoP- 1)*dat[i,1]*dat[i,2] + dat[i,2]^2)/(2*(1-(2*rhoP- 1)^2)))
}
q_density(0.1)
#integrate q over support of rhoP
norm_const <- integrate(q_density, lower=0, upper=1)
curve(q_density,from=0, to=1)
q_density(0.5)
q_density <- function(rhoP){
num <- 6*(1-rhoP)*rhoP
denom <- (2 *pi*sqrt(1-(2*rhoP- 1)^2))^(5)
exp_num <- sum(dat[i,1]^2 - 2*(2*rhoP- 1)*dat[i,1]*dat[i,2] + dat[i,2]^2)
exp_denom <- 2*(1-(2*rhoP- 1)^2)
return(num/denom*exp(exp_num/exp_denom))
}
q_density(0.5)
q_density(0.1)
#integrate q over support of rhoP
norm_const <- integrate(q_density, lower=0, upper=1)
curve(q_density,from=0,to=1)
q_density(0)
q_density <- function(rhoP){
num <- 6*(1-rhoP)*rhoP
denom <- (2 *pi*sqrt(1-(2*rhoP- 1)^2))^(5)
exp_num <- sum(dat[i,1]^2 - 2*(2*rhoP- 1)*dat[,1]*dat[,2] + dat[,2]^2)
exp_denom <- 2*(1-(2*rhoP- 1)^2)
return(num/denom*exp(exp_num/exp_denom))
}
q_density(0)
q_density <- function(rhoP){
num <- 6*(1-rhoP)*rhoP
denom <- (2 *pi*sqrt(1-(2*rhoP- 1)^2))^(5)
exp_num <- sum(dat[,1]^2 - 2*(2*rhoP- 1)*dat[,1]*dat[,2] + dat[,2]^2)
exp_denom <- 2*(1-(2*rhoP- 1)^2)
return(num/denom*exp(exp_num/exp_denom))
}
#integrate q over support of rhoP
norm_const <- integrate(q_density, lower=0.1, upper=0.9)
rhoP <- 0.5
dat[,1]^2
2*(2*rhoP- 1)*dat[,1]*dat[,2]
dat[,2]^2
dat[,1]^2 - 2*(2*rhoP- 1)*dat[,1]*dat[,2] + dat[,2]^2
exp_num <- sum(dat[,1]^2 - 2*(2*rhoP- 1)*dat[,1]*dat[,2] + dat[,2]^2)
exp_num
num <- 6*(1-rhoP)*rhoP
denom <- (2 *pi*sqrt(1-(2*rhoP- 1)^2))^(5)
exp_num <- sum(dat[,1]^2 - 2*(2*rhoP- 1)*dat[,1]*dat[,2] + dat[,2]^2)
exp_denom <- 2*(1-(2*rhoP- 1)^2)
num
denom
exp_denom
num/denom*exp(exp_num/exp_denom)
q_density <- function(rhoP){
num <- 6*(1-rhoP)*rhoP
denom <- (2 *pi*sqrt(1-(2*rhoP- 1)^2))^(5)
exp_num <- sum(dat[,1]^2 - 2*(2*rhoP- 1)*dat[,1]*dat[,2] + dat[,2]^2)
exp_denom <- 2*(1-(2*rhoP- 1)^2)
return(num/denom*exp(exp_num/exp_denom))
}
#integrate q over support of rhoP
norm_const <- integrate(q_density, lower=0.1, upper=0.9)
norm_const
curve(q_density,from=0.1, to=0.9)
curve(q_density,from=0.2, to=0.9)
curve(q_density,from=0.2, to=0.8)
curve(q_density,from=0.4, to=0.6)
p_density <- function(rhoP){
q_density/norm_const$value
}
gc()
rm(list=ls())
gc()
